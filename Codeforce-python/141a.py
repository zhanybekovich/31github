'''
Вот и прошли новогодние праздники. Для Деда Мороза и его коллег пришло время отдыха и приема гостей. Когда встречаются два «Новогодних Деда», то их помощники в честь такого знаменательного события вырезают из картона буквы имен гостя и хозяина, и вывешивают над парадным входом. Однажды ночью, когда все легли спать, кто-то снял все буквы имен наших персонажей. Затем он, возможно, перемешал эти буквы, и положил в одну кучку перед дверью.

Наутро так и не удалось найти виновника беспорядка, но всех заинтересовал еще один вопрос: можно ли из букв, сложенных перед дверью, заново составить имена гостя и хозяина? То есть нужно проверить, что не останется лишних, и не придется вырезать дополнительные буквы.

Помогите «Новогодним Дедам» и их друзьям разобраться с этой проблемой, если вам даны обе надписи, висевшие над парадной дверью вечером, и буквы в кучке, найденной перед парадной дверью утром.

Входные данные
Во входных данных три строки: в первой строке — имя гостя, во второй — имя хозяина резиденции, в третьей строке — буквы в кучке, найденной перед дверью утром. Все строки не пусты и состоят только из заглавных латинских букв. Длина каждой строки не превосходит 100.

Выходные данные
Выведите «YES» без кавычек, если из букв в кучке можно составить имена «Новогодних Дедов», и «NO» без кавычек в противном случае.

Примеры
входные данныеСкопировать
SANTACLAUS
DEDMOROZ
SANTAMOROZDEDCLAUS
выходные данныеСкопировать
YES
входные данныеСкопировать
PAPAINOEL
JOULUPUKKI
JOULNAPAOILELUPUKKI
выходные данныеСкопировать
NO
входные данныеСкопировать
BABBONATALE
FATHERCHRISTMAS
BABCHRISTMASBONATALLEFATHER
выходные данныеСкопировать
NO
Примечание
В первом примере: из букв, записанных в последней строке можно составить имена, записанные в первых двух, и не останется лишних букв.

Во втором примере: в кучке не хватает буквы «P» и лишняя буква «L».

В третьем примере: лишняя буква «L».
'''


def can_form_names(guest_name, host_name, letters_pile):
    # Объединяем имена гостя и хозяина
    combined_names = guest_name + host_name

    # Подсчет букв в объединенных именах
    combined_names_count = {}
    for char in combined_names:
        combined_names_count[char] = combined_names_count.get(char, 0) + 1

    # Подсчет букв в куче букв
    letters_pile_count = {}
    for char in letters_pile:
        letters_pile_count[char] = letters_pile_count.get(char, 0) + 1

    # Проверяем, что букв в куче достаточно и не остается лишних
    return combined_names_count == letters_pile_count


# Чтение входных данных
guest_name = input().strip()
host_name = input().strip()
letters_pile = input().strip()

# Проверка возможности составления имен
result = can_form_names(guest_name, host_name, letters_pile)

# Вывод результата
if result:
    print("YES")
else:
    print("NO")
